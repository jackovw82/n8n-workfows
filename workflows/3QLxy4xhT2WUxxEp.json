{
  "active": false,
  "connections": {
    "new": {
      "main": [
        [
          {
            "node": "GitHub Create",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "same": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "isDiffOrNew",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Globals": {
      "main": [
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "different": {
      "main": [
        [
          {
            "node": "GitHub Edit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OneAtATime": {
      "main": [
        [
          {
            "node": "GitHub",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "GitHub Edit": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isDiffOrNew": {
      "main": [
        [
          {
            "node": "github_status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub Create": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "github_status": {
      "main": [
        [
          {
            "node": "same",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "different",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "new",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command": {
      "main": [
        [
          {
            "node": "JSON formatting",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON formatting": {
      "main": [
        [
          {
            "node": "OneAtATime",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "n8n": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Completed Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Starting Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Starting Message": {
      "main": [
        [
          {
            "node": "n8n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Failed Flows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Failed Flows": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Globals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-01-18T07:55:51.235Z",
  "id": "3QLxy4xhT2WUxxEp",
  "meta": null,
  "name": "WF101: Backup your credentials to GitHub",
  "nodes": [
    {
      "parameters": {
        "command": "npx n8n export:credentials --all "
      },
      "id": "ef108d4f-1f00-476a-b573-f2da23b5473f",
      "name": "Execute Command",
      "type": "n8n-nodes-base.executeCommand",
      "position": [
        940,
        -160
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "repo.owner",
              "value": "jackovw82"
            },
            {
              "name": "repo.name",
              "value": "n8n-backups"
            },
            {
              "name": "repo.path",
              "value": "workflows/"
            }
          ]
        },
        "options": {}
      },
      "id": "1947fd14-b60e-4a86-9f6e-58f2c18978db",
      "name": "Globals",
      "type": "n8n-nodes-base.set",
      "position": [
        740,
        -160
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Credentials Backups\nThis workflow will automatically backup your credentials to your Github account.\n\n### Setup\nOpen Globals and update the values below\n**repo.owner:** This is your Github username\n**repo.name:** This is the name of your repository\n**repo.path:** This is the folder to use within the repository, If it doesn't exist it will be created.\n**file.name** the name of the file you want on your repositoy.\n\nIf your username was `n8n-io` and your repository was called `n8n-backups` and you wanted the credentials to go into a `credentials` folder within a file named `credentials.json` you would set:\n\nrepo.owner - n8n-io\nrepo.name - n8n-backups\nrepo.path - credentials",
        "height": 506.50098586696697,
        "width": 389.78906250000017
      },
      "id": "7786e1c5-1518-432b-bfc1-83cd1911bc2d",
      "name": "Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        80,
        -380
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": "={{$node[\"Globals\"].json[\"repo\"][\"owner\"]}}",
        "repository": "={{$node[\"Globals\"].json[\"repo\"][\"name\"]}}",
        "filePath": "={{$node[\"Globals\"].json[\"repo\"][\"path\"]}}{{$json[\"name\"]}}.json",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "db9fc1ac-9c9f-4663-a1eb-7f01bbe12ee1",
      "name": "GitHub",
      "type": "n8n-nodes-base.github",
      "position": [
        1580,
        -300
      ],
      "typeVersion": 1,
      "alwaysOutputData": true,
      "credentials": {
        "githubApi": {
          "id": "wUh09NYLk6pUiep0",
          "name": "GitHub account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json[\"github_status\"]}}",
        "rules": {
          "rules": [
            {
              "value2": "same"
            },
            {
              "value2": "different",
              "output": 1
            },
            {
              "value2": "new",
              "output": 2
            }
          ]
        }
      },
      "id": "0998b3dd-9309-41e3-a83f-3553455e7c9e",
      "name": "github_status",
      "type": "n8n-nodes-base.switch",
      "position": [
        2220,
        -180
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "3ce3475a-a5ff-414d-98ba-411a4d425af2",
      "name": "same",
      "type": "n8n-nodes-base.noOp",
      "position": [
        2460,
        -340
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "17f13f16-f5d1-496b-b349-cda4e70fe586",
      "name": "different",
      "type": "n8n-nodes-base.noOp",
      "position": [
        2460,
        -180
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "704d37ab-b48f-405a-ac11-7354232035a4",
      "name": "new",
      "type": "n8n-nodes-base.noOp",
      "position": [
        2460,
        -20
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": "={{$node[\"Globals\"].json[\"repo\"][\"owner\"]}}",
        "repository": "={{$node[\"Globals\"].json[\"repo\"][\"name\"]}}",
        "filePath": "={{$node[\"Globals\"].json[\"repo\"][\"path\"]}}{{$node[\"OneAtATime\"].json[\"name\"]}}.json",
        "fileContent": "={{$node[\"isDiffOrNew\"].json[\"n8n_data_stringy\"]}}",
        "commitMessage": "=[N8N Backup] {{$node[\"OneAtATime\"].json[\"name\"]}}.json ({{$json[\"github_status\"]}})"
      },
      "id": "786b853c-34a5-4544-a0cc-a5bf6cd3cce1",
      "name": "GitHub Edit",
      "type": "n8n-nodes-base.github",
      "position": [
        2640,
        -180
      ],
      "typeVersion": 1,
      "credentials": {
        "githubApi": {
          "id": "wUh09NYLk6pUiep0",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "owner": "={{$node[\"Globals\"].json[\"repo\"][\"owner\"]}}",
        "repository": "={{$node[\"Globals\"].json[\"repo\"][\"name\"]}}",
        "filePath": "={{$node[\"Globals\"].json[\"repo\"][\"path\"]}}{{$node[\"OneAtATime\"].json[\"name\"]}}.json",
        "fileContent": "={{$node[\"isDiffOrNew\"].json[\"n8n_data_stringy\"]}}",
        "commitMessage": "=[N8N Backup] {{$node[\"OneAtATime\"].json[\"name\"]}}.json ({{$json[\"github_status\"]}})"
      },
      "id": "4a19b2f4-7969-4b7c-9f2d-c8642cf337e0",
      "name": "GitHub Create",
      "type": "n8n-nodes-base.github",
      "position": [
        2640,
        -20
      ],
      "typeVersion": 1,
      "credentials": {
        "githubApi": {
          "id": "wUh09NYLk6pUiep0",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "c437c9f6-6ceb-4e4c-9128-a995e0c6450e",
      "name": "OneAtATime",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        1360,
        -160
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Single Item Loop\nWe process each credential item one at a time, We first check Github to see if a file exists then we merge the Github Data and the API item so we can check if the values match in the function node `isDiffOrNew` we then set a status of `same`, `different` or `new`",
        "height": 404,
        "width": 755
      },
      "id": "e954fb6d-88ac-4b78-831b-01497ce16a29",
      "name": "Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1340,
        -420
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Save the data\nUsing the switch node we work out what to do based on the previous status,  If it is the same we do nothing, If it is different we update the file in Github and if it is new we create a new file. After this is done we loop back to the Split in Batches node (OneAtAtTime) to start the process again.",
        "height": 693.9283333333326,
        "width": 666.4416666666662
      },
      "id": "1e87dc49-0ffd-465d-8bf3-8f0dedd4d194",
      "name": "Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2180,
        -500
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// File Returned with Content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Get JSON Objects\n  var origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64'));\n  var n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON Objects\n  var orderedOriginal = {}\n  var orderedActual = {}\n  \n  Object.keys(origWorkflow).sort().forEach(function(key) {\n    orderedOriginal[key] = origWorkflow[key];\n  });\n  \n  Object.keys(n8nWorkflow).sort().forEach(function(key) {\n    orderedActual[key] = n8nWorkflow[key];\n  });\n\n  // Determine Difference\n  if ( JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual) ) {\n    $input.all()[0].json.github_status = \"same\";\n    $input.all()[0].json.content_decoded = orderedOriginal;\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.content_decoded = orderedOriginal;\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n// No File Returned / New Workflow\n} else {\n  // Order JSON Object\n  var n8nWorkflow = ($input.all()[1].json);\n  var orderedActual = {}\n  Object.keys(n8nWorkflow).sort().forEach(function(key) {\n    orderedActual[key] = n8nWorkflow[key];\n  });\n  \n  // Proper Formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return Items\nreturn $input.all();"
      },
      "id": "205436ba-eeb1-4f4d-a335-d2ad90eb4893",
      "name": "isDiffOrNew",
      "type": "n8n-nodes-base.code",
      "position": [
        1980,
        -180
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "d7005cd0-98e8-4c8b-abdb-493c519f0d66",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "position": [
        1800,
        -180
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "// Function to beautify JSON\nfunction beautifyJson(jsonString) {\n  try {\n    // Parse the JSON string\n    const jsonObject = JSON.parse(jsonString);\n\n    // Format the JSON with indentation\n    return jsonObject; // Return the parsed object directly\n  } catch (error) {\n    // Return the error message if JSON is invalid\n    return `Invalid JSON: ${error.message}`;\n  }\n}\n\n// Retrieve the JSON object from the input data\nconst input = $input.all()[0].json;\n\n// Extract the JSON string from the stdout field\nconst jsonString = input.stdout.match(/\\[{.*}\\]/s);\n\n// Check if a valid JSON string is found\nif (!jsonString) {\n  return {\n    json: {\n      error: \"No valid JSON string found in stdout.\"\n    }\n  };\n}\n\n// Beautify the JSON\nconst beautifiedJson = beautifyJson(jsonString[0]);\n\n// Output the beautified JSON, ensuring each entry is in an object with a 'json' key\nconst output = beautifiedJson.map(entry => ({ json: entry }));\n\n// Return the output\nreturn output;\n"
      },
      "id": "84bec454-6246-43fd-b591-44e7f941fbbd",
      "name": "JSON formatting",
      "type": "n8n-nodes-base.code",
      "position": [
        1140,
        -160
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "id": "cea566db-4934-4134-892b-5e645b2098f5",
      "name": "n8n",
      "type": "n8n-nodes-base.n8n",
      "position": [
        940,
        -840
      ],
      "typeVersion": 1,
      "credentials": {
        "n8nApi": {
          "id": "FMjmGrqZdEsyDdDG",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "ea0e7f7c-36f9-4d45-b322-93d83de49752",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        1140,
        -840
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "id": "e639c5cd-539d-4759-88b1-5f2ff332ee93",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        560,
        -840
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "content": "## Backup to GitHub \nThis workflow will backup all instance workflows to GitHub every 24 hours.\n\nThe files are saved into folders using `YYYY/MM/` for the directory path and `ID.json` for the filename.\n\nThe Repo Owner, Repo Name and Main folder are set using the **Variables** feature but can be replaced with the `Config` node in the subworkflow. \n\nThe workflow runs calls itself to help reduce memory usage, Once the workflow has completed it will send an optional notification to Slack.\n\n### Time to Run\nTested with 1423 workflows on `1.44.1` it took under 30 minutes for the first run and under 12 minutes once the initial run is complete.",
        "height": 417,
        "width": 385,
        "color": 4
      },
      "id": "1f9b8a91-da52-4817-8f61-855b1099cece",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        60,
        -1020
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Main workflow loop",
        "height": 416,
        "width": 1253,
        "color": 7
      },
      "id": "9d4b9833-19d9-4a01-a462-57ce864a715e",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        500,
        -1020
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C07CD5PH1DJ",
          "mode": "list",
          "cachedResultName": "n8n-notifications"
        },
        "text": "=:information_source:  Starting Workflow Backup [{{ $execution.id }}]",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "id": "82940aad-a5fd-454b-80ec-e7c07d57f061",
      "name": "Starting Message",
      "type": "n8n-nodes-base.slack",
      "position": [
        780,
        -840
      ],
      "webhookId": "c02eb407-5547-4aa0-9ebf-46dab67b63b6",
      "typeVersion": 2.2,
      "credentials": {
        "slackOAuth2Api": {
          "id": "IfW5zsCj0YFyQdOv",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": "={{ $workflow.id }}",
        "mode": "each",
        "options": {}
      },
      "id": "af230ff0-3fe0-4c3f-b381-5f854d4c36d0",
      "name": "Execute Workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        1360,
        -820
      ],
      "typeVersion": 1,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C07CD5PH1DJ",
          "mode": "list",
          "cachedResultName": "n8n-notifications"
        },
        "text": "=✅ Backup has completed - {{ $('n8n').all().length }} workflows have been processed.",
        "otherOptions": {}
      },
      "id": "61bc5d0d-0479-404e-8802-c906934dbc95",
      "name": "Completed Notification",
      "type": "n8n-nodes-base.slack",
      "position": [
        1360,
        -980
      ],
      "webhookId": "a0c6e8c8-5d71-40fa-b02b-63a7ed5726c4",
      "executeOnce": true,
      "typeVersion": 2.2,
      "credentials": {
        "slackOAuth2Api": {
          "id": "IfW5zsCj0YFyQdOv",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C07CD5PH1DJ",
          "mode": "list",
          "cachedResultName": "n8n-notifications"
        },
        "text": "=:x: Failed to backup {{ $('Loop Over Items').item.json.id }}",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "id": "643a377a-5b74-461d-aa55-ccd96b408509",
      "name": "Failed Flows",
      "type": "n8n-nodes-base.slack",
      "position": [
        1560,
        -800
      ],
      "webhookId": "2a092edb-de12-490f-931b-34d70e7d7696",
      "typeVersion": 2.2,
      "credentials": {
        "slackOAuth2Api": {
          "id": "IfW5zsCj0YFyQdOv",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Subworkflow",
        "height": 832,
        "width": 3051,
        "color": 6
      },
      "id": "89c0c67a-df48-4f3a-a936-3c84bddafca0",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        60,
        -540
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
              "name": "Done",
              "type": "boolean",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "6c3818d8-137a-48ca-b48b-3b5f6a18d86a",
      "name": "Return",
      "type": "n8n-nodes-base.set",
      "position": [
        2920,
        -200
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {},
      "id": "4c191f4c-48fe-490c-b333-444880fd4c41",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        560,
        -160
      ],
      "typeVersion": 1
    }
  ],
  "pinData": null,
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-01-18T07:55:51.235Z",
  "versionId": "dbb7b5d0-cab2-43c0-b675-a36b4b2e1444"
}